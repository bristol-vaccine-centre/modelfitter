% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-labels.R
\name{model_labels}
\alias{model_labels}
\title{Creates a table or plot row template for a set of models}
\usage{
model_labels(model, label_fn, subgroup_label_fn, ...)
}
\arguments{
\item{model}{a model or list of models.}

\item{label_fn}{a function that allows a predictor label to be renamed. This
should expect a vector and return a vector of the same length. Levels will be
terms in the model function and may be column names, or combinations thereof}

\item{subgroup_label_fn}{a function that allows a subgroup label to be renamed. This
should expect a vector and return a vector of the same length. The
input to this function will be either a factor level name or a combination
of them or whatever else the model decides to name it's coefficients.}

\item{...}{not used}
}
\value{
a data frame with \code{model.order}, \code{group.order}, \code{subgroup.order},
\code{characteristic}, \code{subgroup}, dplaye columns and  \code{predictor} and \code{term}
key columns to link to the output of \code{broom::tidy} or \code{global_p_value}
(i.e. Anova II/III outputs)
}
\description{
This produces a dataframe which can be used to arrange the coefficients
and p-values from one statistical model, or set of models. The
rows are a superset of all the coefficients of the models and is designed
to be used to left_join the outputs of \code{broom::tidy} (by \code{term}) or
\code{global_p_value} (by \code{predictor}) to construct a tabular output.
}
\details{
It is expect that use cases such as multiple univariate models + a few
fully adjusted models are passed to this function and the result is
to be displayed in a single plot or figure.
}
\examples{
diamonds3 = ggplot2::diamonds \%>\% dplyr::mutate(
  is_coloured = color <= "F",
  cut = factor(cut,ordered=FALSE),
  price_cat = tableone::cut_integer(price, c(500,1000,2000,4000))
) \%>\% dplyr::select(-color)

model = stats::glm(is_coloured ~ cut + carat + clarity * price, diamonds3, family="binomial")
model_labels(model, toupper, tolower)


model2 = logistic_regression(diamonds3, is_coloured ~ I(cut=="Good") + carat + clarity * price)
model_labels(model2, toupper, tolower)

model3 = stats::glm(is_coloured ~ carat + cut * clarity +  price, diamonds3, family="binomial")
model_labels(model3, toupper, tolower)


model4 = stats::glm(
  is_coloured ~ cut + carat + clarity + price, 
  diamonds3, 
  family="binomial", 
  contrasts=list(clarity=MASS::contr.sdif))
  
coef(model4)
model_labels(model4, toupper, tolower)

# tmp = .ordered_contrasts(diamonds3, )
# model5 = stats::glm(
#   is_coloured ~ cut + carat + clarity * price, 
#   diamonds3, 
#   family="binomial", contrasts=tmp)
#   
# model_labels(model5, toupper, tolower)

model6 = stats::glm(
  is_coloured ~ cut + carat + clarity + price_cat, 
  diamonds3, 
  family="binomial", 
  contrasts=list(clarity=MASS::contr.sdif, price_cat=MASS::contr.sdif)
)

model_labels(model6, toupper, tolower)

model7 = stats::glm(
  is_coloured ~ cut + carat + clarity + splines::ns(price,df=2), 
  diamonds3, 
  family="binomial", 
  contrasts=list(clarity=MASS::contr.sdif))
  
model_labels(model7, toupper)

}
