% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/execution.R
\name{execute_configuration}
\alias{execute_configuration}
\title{Fit statistical models defined in a \code{modelfitter} configuration}
\usage{
execute_configuration(
  cfg,
  retain_fit = sum(cfg$n_boots) < 50,
  performance = TRUE,
  ...,
  cache = FALSE
)
}
\arguments{
\item{cfg}{a 4 column dataframe with
\itemize{
\item model_name - minumum
\item model_fn
\item data_subset_fn
\item model_formula
}}

\item{retain_fit}{keep the model fit object? If the config results in
less than 50 models then the default of this is TRUE. Otherwise we summarise
the models as we go saving memory.}

\item{performance}{calculate performance metrics for all the models. These
will be summarised over bootstrap replicates. Setting this to false may
be a good idea if you have lots of models.}

\item{...}{
  Arguments passed on to \code{\link[=model_labels]{model_labels}}
  \describe{
    \item{\code{model}}{a model or list of models.}
    \item{\code{label_fn}}{a function that allows a predictor label to be renamed. This
should expect a vector and return a vector of the same length. Levels will be
terms in the model function and may be column names, or combinations thereof}
    \item{\code{subgroup_label_fn}}{a function that allows a subgroup label to be renamed. This
should expect a vector and return a vector of the same length. The
input to this function will be either a factor level name or a combination
of them or whatever else the model decides to name it's coefficients.}
  }}

\item{cache}{cache model output}
}
\value{
a 5 column dataframe with additional nested fitted results in
\code{model_fit}. This nested dataframe will have the columns:
\itemize{
\item \code{boot} - an id for the data bootstrap or imputation;
\item \code{fit} (optional) - the model fit itself;
\item \code{coef} the model coefficients;
\item \code{global_p} the global p values for this model (see global_p_value());
\item \code{performance} (optional) the performance metrics for this model;
}
}
\description{
Fit statistical models defined in a \code{modelfitter} configuration
}
\examples{

tmp = configure_model(
  "Iris", I(Species == "versicolor") ~ ., iris, logistic_regression)
tmp2 = tmp \%>\% execute_configuration()
 
tmp3  = configure_models(
   formula_provider(
      "<F" = I(color < "F") ~ cut + carat + clarity + price,
      "<H" = I(color < "H") ~ cut + carat + clarity + price
   ),
   bootstrap_provider(ggplot2::diamonds, max_n = 100),
   model_function_provider(
     "Log reg" = modelfitter::logistic_regression,
     "Poisson" = modelfitter::quasi_poisson
   )
)

tmp4 = tmp3 \%>\% execute_configuration(cache = TRUE)

}
