% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/global-p-value.R
\name{global_p_value}
\alias{global_p_value}
\title{Calculate a global P-value for a model fit for each of the predictors.}
\usage{
global_p_value(x, ...)
}
\arguments{
\item{x}{a model}

\item{...}{not used.}
}
\value{
a dataframe of the predictors of the model (but not the levels) in
one column and a global p value in another. The global.p will be given as zero
or one despite this being not really possible. It si assumed that it will
be formatted to truncate very low or very high values.
}
\description{
In the summary output of a model there is a p-value for each level of the factors
whereas usually we want to know what the overall contribution of the individual
predictor to the model is.
}
\details{
This function usually calculates a Type 2 Anova for the predictors within the models
but sometimes falls back to different methods if the model is not supported
by the \code{car::Anova} or \code{stats::anova} packages. The method used is reported
in the output. This is designed as an automated process and may not work in
all situations, or produce appropriate output for all model types. Interaction
terms may be particularly problematic.
}
\examples{
diamonds2 = ggplot2::diamonds \%>\% dplyr::mutate(
   is_coloured = color <= "F",
   dplyr::across(dplyr::where(is.ordered), ~ factor(.x,ordered=FALSE))
) \%>\% dplyr::select(-color)

lmodel = stats::lm(Petal.Width ~ ., iris)
glmodel = logistic_regression(diamonds2, is_coloured ~ cut + carat + clarity * price)
coxfit = cox_model(survival::flchain, survival::Surv(futime, death) ~ sex * age)

# Error conditions
try(anova(stats::lm( cut ~ carat + clarity * price, diamonds2)))
global_p_value(stats::lm( cut ~ carat + clarity * price, diamonds2))


# cox model
global_p_value(coxfit)

# linear model
global_p_value(lmodel)

# logistic regression (OR)
global_p_value(
  stats::glm(is_coloured ~ cut + carat + clarity + price, diamonds2,  family="binomial"))
global_p_value(
  logistic_regression(diamonds2, is_coloured ~ cut + carat + clarity * price))

# poisson regression (RR)
global_p_value(
  quasi_poisson(diamonds2, is_coloured ~ cut + carat + clarity * price))
global_p_value(
  robust_poisson(diamonds2, is_coloured ~ cut + carat + clarity * price))
global_p_value(
  robust_poisson_2(diamonds2, is_coloured ~ cut + carat + clarity * price))

# log binomial regression (RR)
# TODO: this does not work at the moment as an example as the log_binomial starting value is
# a problem
global_p_value(
  log_binomial(diamonds2, is_coloured ~ cut + carat + clarity + price))

# global_p_value(
#  log_binomial_2(diamonds2, is_coloured ~ cut + carat + clarity + price))


}
